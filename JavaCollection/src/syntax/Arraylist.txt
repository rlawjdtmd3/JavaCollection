2015. 07 .24

===== java.util.ArrayList =====
- Object 배열을 이용해서 데이터를 순차적으로 저장하는 공간
 (오브젝트 ~ 그니깐객체죵)
 -첫번째 공간은 인덱스 0 번을 갖는다(배열과 동일)
 -공간 확장 방식은 Vector 와 동일하다
 
 ======= Vector vs. ArrayList ====
 
-Vector 는 멀티스레드에 대한 동기화가 되어 있으나
-ArrayList는 동기화가 되어 있지 않다.


======ArrayList 만의 특징 =====
 비동기화된 컬렉션은 동기화된 컬렉션보다 더 나은
 기능을 제공항며 스레드들이 컬렉션을 공유하지 않는
 프로그램에서는 일반적으로 ArrayList 를 Vector보다
 더 선호하며 ArrayList 는 "동기화를 고려하지 않는
 Vector 처럼 동기화 함으로써 스레드 동기화에
 따르는 부담을 가지지 않기 떄문에 Vector 보다
 더 빠르게 실행된다.
 
 이녀석도 4대천왕중 2번쨰 정도
 
 
 벡터라는녀석은 녀석의 임무가 동기화인데
 arraylist는 벡터보다 프리한상태 동기화를 굳이 안해도되는 .. 더개선된 ..
 동기화에 구속되지 않는 ..
 
 
 컬렉션 = 이녀석도 클래스 
 집합구조로 만들어진클래스 ,, 배열처럼 집합체로 만들어진 클래스
 내부가 이미 방이 나뉜 ,,집합을 위해 만들어진 클래스를 "컬렉션"이라고 합니다 ..
 
 
 
 
 2015. 07 .27
 ======ArrayList 와 배열 (Array)의 차이 =========
 
 
 [배열]
 1. 선언 :
 	String[] arr = new Stirng[10];
 2. 길이 :
 	arr.length
 3. 추가 :
 	arr[i] = "샘플"
 4. 삭제 : 
  	arr[i] = null
 5. 검색 :
 	boolean flag =false;
 	for(String str : arr){
 		if("검색어".equals(str)){
 			flag = true;
 			break;
 		}
 		
 		
 [ArrayList]
 
 1. 선언 : 
 	List<String> list = new ArrayList<String>();  
 	(인터페이스 타입으로 바로구현되기때문에  ArrayList가아닌 List로 시작하는거 주의)
 2. 길이 : 
 	list.size();
 3. 추가 :
 	list.add("샘플");
 4. 삭제 :
 	list.remove(1) // 인덱스
 5. 찾기 :
 	list.contains("샘플")